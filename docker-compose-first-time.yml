networks:
  apaas-ob-network:
    # external: true
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.10.1

services:

  # redis 服务，webhook addin 依赖
  # 如果使用已有的 redis，可将此部分注释掉
  # 如果要修改对应 redis conf，请修改 ./redis/conf/redis.conf
  redis:
    image: redis:7.4.1
    container_name: redis
    ports:
      - 127.0.0.1:6379:6379
    networks:
      apaas-ob-network:
        ipv4_address: 172.18.10.6
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/etc/redis/redis.conf
      - ./redis/logs:/logs
    command:
      - /etc/redis/redis.conf
    entrypoint: /usr/local/bin/redis-server
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    restart: always
  
  # Grafana Loki 的容器服务，用于存储日志数据，然后使用强大的 LogQL 查询语言进行日志的查询分析
  loki:
    image: grafana/loki:3.0.0
    container_name: grafana-loki
    networks:
      apaas-ob-network:
        ipv4_address: 172.18.10.7
    ports:
      - 127.0.0.1:3100:3100
    restart: always
    volumes:
      - ./loki:/var/loki
      - ./loki/config:/mnt/config
    command:
      - -config.file=/mnt/config/loki-config.yaml
    entrypoint: /usr/bin/loki

  # Prometheus 的容器服务，用于存储时间序列的 metrics 数据，然后可以使用强大的 PromQL 查询语言进行指标的查询分析
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: prometheus
    # deploy:
    #     resources:
    #         limits:
    #             cpus: ${CPUS}
    #             memory: ${MEMORY_LIMIT}
    networks:
      apaas-ob-network:
        ipv4_address: 172.18.10.8
    ports:
      - 127.0.0.1:9090:9090
    restart: always
    volumes:
      - ./prometheus/conf:/etc/prometheus
      - ./prometheus/data:/prometheus
      - ./prometheus/logs:/var/logs/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --log.level=info
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --storage.tsdb.retention=720h
      - --web.enable-lifecycle
    entrypoint: /bin/prometheus

  # Grafana 的容器服务
  # 启动一个 Grafana 实例用于构建可视化看板、报警等，也可以用于日志查询、Trace 信息的查看，非常强大
  grafana:
    image: grafana/grafana:11.3.1
    container_name: grafana
    # deploy:
    #   resources:
    #     limits:
    #       cpus: ${CPUS}
    #       memory: ${MEMORY_LIMIT}
    networks:
      apaas-ob-network:
        ipv4_address: 172.18.10.9
    ports:
      - 3000:3000
    restart: always
    environment:
      PATH: /usr/share/grafana/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      GF_PATHS_CONFIG: /etc/grafana/grafana.ini
      GF_PATHS_DATA: /var/lib/grafana
      GF_PATHS_HOME: /usr/share/grafana
      GF_PATHS_LOGS: /var/log/grafana
      GF_PATHS_PLUGINS: /var/lib/grafana/plugins
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      ### 注意 ###
      # 请修改这里的配置为主机的实际 IP，根据实际需要，填写主机的局域网 IP 或 公网 IP
      GF_SERVER_DOMAIN: 127.0.0.1
      GF_SERVER_ROOT_URL: http://127.0.0.1:3000
    user: "0"
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/log:/var/log/grafana
      - ./grafana/conf/grafana.db:/tmp/grafana.db
    entrypoint: /bin/sh -c 'cp /tmp/grafana.db /var/lib/grafana/grafana.db && /usr/share/grafana/bin/grafana-server'
    depends_on:
      - loki
      - prometheus
      - grafana_webhook_addin
      - metrics_agent
  
  # 启动 metrics agent 用来接收开放平台事件
  # 暴露 /metrics endpoint 供 prometheus server 来 scrape
  # 提供了 2 个版本，go 和 node，根据需要自行选择对应的版本

  # go version
  # metrics_agent:
  #   image: galaxy911/apaas_ob_agent:latest
  #   container_name: agent-service-go
  #   networks:
  #     apaas-ob-network:
  #       ipv4_address: 172.18.10.10
  #   ports:
  #     - 127.0.0.1:33444:33444
  #   restart: always
  #   environment:
  #     FEISHU_APP_ID: cli_a68f84e19b6e100b
  #     FEISHU_APP_SECRET: 1****************
  #     AGENT_SERVER_PORT: 8001
  #     AGENT_LOG_LEVEL: info
  #     AGENT_LOG_FILE_ENABLE: "true"
  #     AGENT_LOG_LOKI_ENABLE: "true"
  #     AGENT_LOG_LOKI_ROOT_URL: http://172.18.10.7:3100
  #   volumes:
  #     - ./agent/conf:/mnt/apaas_ob_agent/conf
  #     - ./agent/logs:/var/log/apaas_ob_agent
  #   command:
  #     - -config-file=/mnt/apaas_ob_agent/conf/config.yaml
  #     - -prom-schema-dir=/mnt/apaas_ob_agent/conf/schema/prometheus
  #   entrypoint: /opt/apaas_ob_agent/bin/agent

  # node version
  metrics_agent:
    image: galaxy911/agent-service-node:latest
    container_name: agent-service-node
    networks:
      apaas-ob-network:
        ipv4_address: 172.18.10.10
    environment:
      - METRICS_HTTP_PORT=33444
      - BULL_BOARD_PORT=44445
      - REDIS_CONN_URL=redis://172.18.10.6:6379/14
      - APP_ID=cli_a59a471e0a7fd00d
      - APP_SECRET=LOplEasQrxvmWDiqa************
      - LOKI_API_URL=http://172.18.10.7:3100/loki/api/v1/push
      - LOKI_API_KEY=123456
    volumes:
      - ./agent/logs:/var/logs/agent-service-node
    ports:
      - 127.0.0.1:33444:33444
      - 127.0.0.1:44446:44445
    restart: unless-stopped
    depends_on:
      - redis

  # Grafana Contact Points 中使用，可以通过 webhook 将 grafana 报警以飞书卡片的形式推送到指定的飞书 webhook 机器人
  grafana_webhook_addin:
    image: galaxy911/webhook-multi-platform:latest
    container_name: grafana_webhook
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1024M
    networks:
      apaas-ob-network:
        ipv4_address: 172.18.10.11
    ports:
      - 127.0.0.1:44444:44444
      - 44445:44445
    restart: always
    environment:
      LOKI_API_URL: http://172.18.10.7:3100/loki/api/v1/push
      LOKI_API_KEY: 123456

      # 可选，Grafana 请求时要不要进行请求验证
      # 如果配置了此参数，在 Grana 中配置 Contact points 时，需要填写 Authorization Header - Credentials 中的值为 WEBHOOK_AUTH_KEY 对应的值
      WEBHOOK_AUTH_KEY: 123456

      # 设置 redis
      # 方式一，如果设置了 REDIS_CONN_URL，那么 REDIS_HOST、REDIS_PORT、REDIS_DB_NUMBER 将被忽略
      REDIS_CONN_URL: redis://172.18.10.6:6379/15

      # 方式二
      # REDIS_HOST: 172.18.10.6
      # REDIS_PORT: 6379
      # REDIS_DB_NUMBER: 15

      ### 注意 ###
      # 启动服务前，请将如下地址替换为你自己的 webhook 机器人地址
      # 你可以按照 WEBHOOK_{id}: {webhook robot url} 的格式添加更多 endpoint
      # 添加后，对应的 webhook 地址为 http://172.18.10.11:44444/webhook/{id}
      # 在 Grafana 中添加 Contact points 时，可作为 webhook 地址填入
      # 其中 Authorization Header - Credentials 中填入上述 WEBHOOK_AUTH_KEY 对应的值
      WEBHOOK_default: https://open.feishu.cn/open-apis/bot/v2/hook/2235deb4-0972-46db-852f-69fa6aa213bc
      WEBHOOK_openapi_alert: https://open.feishu.cn/open-apis/bot/v2/hook/2235deb4-0972-46db-852f-69fa6aa213bc
    user: "0"
    entrypoint: /repos/webhook/start.sh
    depends_on:
      - redis

  # 这是可选项
  # 用于启动一个 metrcis mock 服务，生成对应的 metrics
  # 注意，此服务不要和 metrics_agent 同时启动（ip 地址配置是冲突的）
  # mock_metrics:
  #   image: galaxy911/mm-multi-platform:latest
  #   container_name: mock_metrics
  #   networks:
  #     apaas-ob-network:
  #       ipv4_address: 172.18.10.10
  #   ports:
  #     - 33444:33444
  #   restart: always
  #   environment:
  #     REDIS_CONN_URL: redis://172.18.10.6:6379
  #   user: "0"
  #   entrypoint: node
  #   command:
  #     - /repos/mock_metrics/http/index-prom.js
  #   depends_on:
  #     - redis

  # 这是可选项
  # 用于启动一个 code-server 容器（VSCode Online)，方便开发者直接基于 Web 来改对应的工程代码
  # 启动时，会将当前目录的父级目录挂载为容器中的 /repos（可根据需要自行修改挂载目录）
  # 启动后，通过 http://<host_ip>:8443 即可方位在线编辑器，密码为环境变量中 {PASSWORD} 对应设置的值
  # 容器的 sudo 密码为环境变量中 {SUDO_PASSWORD} 对应设置的值
  # 需要时，取消下属配置注释
  # code-server:
  #   image: lscr.io/linuxserver/code-server:latest
  #   container_name: code-server
  #   environment:
  #     PUID: 1000
  #     PGID: 1000
  #     TZ: Asia/Shanghai
  #     PASSWORD: qJgjybj!@
  #     SUDO_PASSWORD: qJgjybj!@
  #     DEFAULT_WORKSPACE: /repos
  #   volumes:
  #     - ./code-server/config:/config
  #     - ../:/repos
  #   ports:
  #     - 8443:8443
  #   restart: unless-stopped